/*
要求：将字符串转换为一个有符号整数。其中会涉及到一些数字和字母交叉出现的字符串，譬如“1234a bb”--1234.

实现思路：
1.有符号、无符号。string.charAt(0) 判断正负或者是直接返回值  --如果带转换字符串的首字符不是数字和‘-’，那么直接返回0；
2.读取字符串中的字符，当读取的字符范围不在ASCII 的 ‘0’-‘9’之间就停止读取；
3.用一个32位的数组来存储读取的数字字符；
4.溢出处理：超过最大值和小于最小值，返回最大或最小值；
5.由于2^31=2147483648  共10位，所以不必用一个32位的数组来存储读取的字符最多用11位就足够了；当指针超过10直接返回最大最小值。
*/
-------------------------------------------
*1.对string进行处理，先判断是否为空---如果为空，不检测直接执行代码会报错；其次，如果为空可以不用处理。
*2.String.trim()-----裁剪，去掉string首部和尾部的空格
*3.对int进行溢出判断不太好做，但是如果用一个long来存储计算的数值然后在和Integer.max min进行比较就能完事了
*4.对于一个int[]存储的数计算sum，不要用mi的方法了。直接每次循环计算*10就好。
public static int stoi(String str){
		if(str.length()==0)
			return 0;
		String s=str.trim();
		//System.out.println(s);
		if(s.length()==0)
			return 0;		
		int sign=1,start=0;
		long num=0;
		if(s.charAt(0)=='+'){
			sign=1;
			start++;
		}else if(s.charAt(0)=='-'){
			sign=-1;
			start++;
		}		
		for(int i=start;i<s.length();i++){
			if(s.charAt(i)<'0'||s.charAt(i)>'9')
				return (int)num*sign;
			num=num*10+s.charAt(i)-'0';
			if(sign==1&&num>Integer.MAX_VALUE)
				return Integer.MAX_VALUE;
			if(sign==-1&&num*sign<Integer.MIN_VALUE)
				return Integer.MIN_VALUE;			
		}				
		return (int)num*sign;
}

----------自己的版本-------------看着难受啊兄弟---------------------------------------------------------------------------------------
import java.util.Scanner;

public class MyStoi {
	public static int[] saveByOrder=new int[11];      //按顺序存储读取的数字
	public static boolean ispositive = true ;                //判断读取的字符串的正负，默认为正数
	public static int readString(String str){             //读取字符串：1.判断正负；2.填充整形数组。返回值返回的是从开始位置连续数字的长度，如果<0,输出0。
		int countLength=0;         //有效连续数字的长度
		int start=0;
		while(true){                      //找到转换开始的位置  start
			if(str.charAt(start)==' ')
				start++;
			else
				break;
		}
		if(str.charAt(start)=='-')
			ispositive=false;
		else if(str.charAt(start)>'9'||str.charAt(start)<'0')
			return -1;
		
		start=ispositive?start:start+1;       //如果是负数则需要向后移动一位
		
		for(int i=start;i<str.length();i++){
			if(str.charAt(i)<='9'&&str.charAt(i)>='0'&&countLength<11){
				saveByOrder[countLength++]=str.charAt(i)-'0';
			}else{
				break;
			}
		}
		
		return countLength;
	  }
	  
	public static int mi(int m){
	    int num=1;
	    for(int i=0;i<m;i++){
	      num*=10;
	    }//for
	    return num;
	  }
	  
	public static int calData(int[] data,int countLength){
		int num=0;
		boolean overflow=false;
		if(countLength<=0)
			return 0;
		for(int i=countLength-1;i>=0;i--){
			int temp=num;
			num+=data[i]*mi(countLength-1-i);
			System.out.println(num);
			if(num<temp){
				overflow=true;
				break;
			}
				
		}
		
		//处理溢出的情况
		if(overflow)
			return ispositive?Integer.MAX_VALUE:Integer.MIN_VALUE;
		else	
			return ispositive?num:-num;
	}
	public static void displayArray(int[] data){
		for(int i=0;i<data.length;i++)
			System.out.print(data[i]);
		return;
	}
	
	public static int myStoi(String str){
	    
	    return calData(saveByOrder,readString(str));
	  }
	public static void main(String[] args){
		while(true){
			System.out.print("input the string or \"stop\" to stop   :");
			Scanner sc=new Scanner(System.in);
			String str=sc.nextLine();
			if(str.equals("stop"))
				break;
			int num=myStoi(str);
			displayArray(saveByOrder);
		    System.out.println('\n'+str+'\n'+num);
		    
		}	    
	  }
}
